// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package database

import (
	"github.com/diwise/api-environment/internal/pkg/infrastructure/repositories/models"
	"sync"
	"time"
)

// Ensure, that DatastoreMock does implement Datastore.
// If this is not the case, regenerate this file with moq.
var _ Datastore = &DatastoreMock{}

// DatastoreMock is a mock implementation of Datastore.
//
// 	func TestSomethingThatUsesDatastore(t *testing.T) {
//
// 		// make and configure a mocked Datastore
// 		mockedDatastore := &DatastoreMock{
// 			GetAirQualityObservedsFunc: func(deviceId string, from time.Time, to time.Time, limit uint64) ([]models.AirQualityObserved, error) {
// 				panic("mock out the GetAirQualityObserveds method")
// 			},
// 			StoreAirQualityObservedFunc: func(entityId string, deviceId string, co2 float64, humidity float64, temperature float64, timestamp time.Time) (*models.AirQualityObserved, error) {
// 				panic("mock out the StoreAirQualityObserved method")
// 			},
// 		}
//
// 		// use mockedDatastore in code that requires Datastore
// 		// and then make assertions.
//
// 	}
type DatastoreMock struct {
	// GetAirQualityObservedsFunc mocks the GetAirQualityObserveds method.
	GetAirQualityObservedsFunc func(deviceId string, from time.Time, to time.Time, limit uint64) ([]models.AirQualityObserved, error)

	// StoreAirQualityObservedFunc mocks the StoreAirQualityObserved method.
	StoreAirQualityObservedFunc func(entityId string, deviceId string, co2 float64, humidity float64, temperature float64, timestamp time.Time) (*models.AirQualityObserved, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAirQualityObserveds holds details about calls to the GetAirQualityObserveds method.
		GetAirQualityObserveds []struct {
			// DeviceId is the deviceId argument value.
			DeviceId string
			// From is the from argument value.
			From time.Time
			// To is the to argument value.
			To time.Time
			// Limit is the limit argument value.
			Limit uint64
		}
		// StoreAirQualityObserved holds details about calls to the StoreAirQualityObserved method.
		StoreAirQualityObserved []struct {
			// EntityId is the entityId argument value.
			EntityId string
			// DeviceId is the deviceId argument value.
			DeviceId string
			// Co2 is the co2 argument value.
			Co2 float64
			// Humidity is the humidity argument value.
			Humidity float64
			// Temperature is the temperature argument value.
			Temperature float64
			// Timestamp is the timestamp argument value.
			Timestamp time.Time
		}
	}
	lockGetAirQualityObserveds  sync.RWMutex
	lockStoreAirQualityObserved sync.RWMutex
}

// GetAirQualityObserveds calls GetAirQualityObservedsFunc.
func (mock *DatastoreMock) GetAirQualityObserveds(deviceId string, from time.Time, to time.Time, limit uint64) ([]models.AirQualityObserved, error) {
	if mock.GetAirQualityObservedsFunc == nil {
		panic("DatastoreMock.GetAirQualityObservedsFunc: method is nil but Datastore.GetAirQualityObserveds was just called")
	}
	callInfo := struct {
		DeviceId string
		From     time.Time
		To       time.Time
		Limit    uint64
	}{
		DeviceId: deviceId,
		From:     from,
		To:       to,
		Limit:    limit,
	}
	mock.lockGetAirQualityObserveds.Lock()
	mock.calls.GetAirQualityObserveds = append(mock.calls.GetAirQualityObserveds, callInfo)
	mock.lockGetAirQualityObserveds.Unlock()
	return mock.GetAirQualityObservedsFunc(deviceId, from, to, limit)
}

// GetAirQualityObservedsCalls gets all the calls that were made to GetAirQualityObserveds.
// Check the length with:
//     len(mockedDatastore.GetAirQualityObservedsCalls())
func (mock *DatastoreMock) GetAirQualityObservedsCalls() []struct {
	DeviceId string
	From     time.Time
	To       time.Time
	Limit    uint64
} {
	var calls []struct {
		DeviceId string
		From     time.Time
		To       time.Time
		Limit    uint64
	}
	mock.lockGetAirQualityObserveds.RLock()
	calls = mock.calls.GetAirQualityObserveds
	mock.lockGetAirQualityObserveds.RUnlock()
	return calls
}

// StoreAirQualityObserved calls StoreAirQualityObservedFunc.
func (mock *DatastoreMock) StoreAirQualityObserved(entityId string, deviceId string, co2 float64, humidity float64, temperature float64, timestamp time.Time) (*models.AirQualityObserved, error) {
	if mock.StoreAirQualityObservedFunc == nil {
		panic("DatastoreMock.StoreAirQualityObservedFunc: method is nil but Datastore.StoreAirQualityObserved was just called")
	}
	callInfo := struct {
		EntityId    string
		DeviceId    string
		Co2         float64
		Humidity    float64
		Temperature float64
		Timestamp   time.Time
	}{
		EntityId:    entityId,
		DeviceId:    deviceId,
		Co2:         co2,
		Humidity:    humidity,
		Temperature: temperature,
		Timestamp:   timestamp,
	}
	mock.lockStoreAirQualityObserved.Lock()
	mock.calls.StoreAirQualityObserved = append(mock.calls.StoreAirQualityObserved, callInfo)
	mock.lockStoreAirQualityObserved.Unlock()
	return mock.StoreAirQualityObservedFunc(entityId, deviceId, co2, humidity, temperature, timestamp)
}

// StoreAirQualityObservedCalls gets all the calls that were made to StoreAirQualityObserved.
// Check the length with:
//     len(mockedDatastore.StoreAirQualityObservedCalls())
func (mock *DatastoreMock) StoreAirQualityObservedCalls() []struct {
	EntityId    string
	DeviceId    string
	Co2         float64
	Humidity    float64
	Temperature float64
	Timestamp   time.Time
} {
	var calls []struct {
		EntityId    string
		DeviceId    string
		Co2         float64
		Humidity    float64
		Temperature float64
		Timestamp   time.Time
	}
	mock.lockStoreAirQualityObserved.RLock()
	calls = mock.calls.StoreAirQualityObserved
	mock.lockStoreAirQualityObserved.RUnlock()
	return calls
}
